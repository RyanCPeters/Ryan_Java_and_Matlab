%%
% the clear statement is just a safety practice used to ensure any possible
% buggy behavior isn't the result of any confounding artifacts left from
% previous code.
clear

%%
% I'm setting up some basic control variables so if I want to change a
% value somewhere I can do it in a single location instead of having to
% hunt down a dozen different places where that value should be used.

n = 202; % let this n be the number of values to have in our x1 through x7 vars

%%
% the variables data1 through data7 are where we are importing the data
% from spreadsheets provided by the class resources shared on canvas. 

data1 = csvread('AirPassengers.csv',1,1);
data2 = csvread('cars.csv',1,1);
data3 = csvread('co2.csv',1,1);
data4 = csvread('cubic.csv',0,0);
data5 = csvread('faithful.csv',1,1);
data6 = csvread('intensity.csv',0,0);
data7 = csvread('JohnsonJohnson.csv',1,1);

%% 
% the following 7 lines set up the reference pointers to function handles
% generated by linreg when only a single parameter has been passed.
single_param1 = linreg(data1);
single_param2 = linreg(data2);
single_param3 = linreg(data3);
single_param4 = linreg(data4);
single_param5 = linreg(data5);
single_param6 = linreg(data6);
single_param7 = linreg(data7);

%% 
% the following 7 lines set up the reference pointers to function handles
% generated by linreg when only passed 2 parameter representing x then y
% vector values.
double_param1 = linreg(data1(:,1),data1(:,2));
double_param2 = linreg(data2(:,1),data2(:,2));
double_param3 = linreg(data3(:,1),data3(:,2));
double_param4 = linreg(data4(:,1),data4(:,2));
double_param5 = linreg(data5(:,1),data5(:,2));
double_param6 = linreg(data6(:,1),data6(:,2));
double_param7 = linreg(data7(:,1),data7(:,2));

%%
% because the y values for a line don't need to correspond to any specific
% x value, an evenly spaced vector of x values can be used for both single
% and double param configurations in linreg for a given data set.
x1 = linspace(min(data1(:,1)),max(data1(:,1)),n);
x2 = linspace(min(data2(:,1)),max(data2(:,1)),n);
x3 = linspace(min(data3(:,1)),max(data3(:,1)),n);
x4 = linspace(min(data4(:,1)),max(data4(:,1)),n);
x5 = linspace(min(data5(:,1)),max(data5(:,1)),n);
x6 = linspace(min(data6(:,1)),max(data6(:,1)),n);
x7 = linspace(min(data7(:,1)),max(data7(:,1)),n);

%%
% now we can set up the actual y values for each of our x positions
y1Single = single_param1(x1);
y1Double = double_param1(x1);

y2Single = single_param2(x2);
y2Double = double_param2(x2);

y3Single = single_param3(x3);
y3Double = double_param3(x3);

y4Single = single_param4(x4);
y4Double = double_param4(x4);

y5Single = single_param5(x5);
y5Double = double_param5(x5);

y6Single = single_param6(x6);
y6Double = double_param6(x6);

y7Single = single_param7(x7);
y7Double = double_param7(x7);

%%
% I wanted to make the code used for generating the plots to be easier to
% read, so I'm creating a consolidated matrix variable out of the x and y
% values for each data set's single and double parameter configurations.

single_param_data1 = [x1',y1Single'];
single_param_data2 = [x2',y2Single'];
single_param_data3 = [x3',y3Single'];
single_param_data4 = [x4',y4Single'];
single_param_data5 = [x5',y5Single'];
single_param_data6 = [x6',y6Single'];
single_param_data7 = [x7',y7Single'];

double_param_data1 = [x1',y1Double'];
double_param_data2 = [x2',y2Double'];
double_param_data3 = [x3',y3Double'];
double_param_data4 = [x4',y4Double'];
double_param_data5 = [x5',y5Double'];
double_param_data6 = [x6',y6Double'];
double_param_data7 = [x7',y7Double'];

%%
% now we plot each data set as well as the linear plots for the best fit
% lines generated by linreg in the single and double parameter conditions.
%
% What we should expect is to see black dots for the raw data points, red
% o's for the single parameter line points, and blue 'plus signs' for each
% of the double parameter line points.
%
% We should also see that the red o's should circumscribe the blue corsses,
% and that both of those lines of points should show a general line that is
% the best approximation of the raw data on the interval of the raw data's
% least to greatest value for x.
figure('Name', 'AirPassengers.csv')
grid on, grid minor, hold on
plot(data1(:,1),data1(:,2),'.k')
plot(single_param_data1(:,1),single_param_data1(:,2),'or')
plot(double_param_data1(:,1),double_param_data1(:,2),'+b') 

figure('Name', 'cars.csv')
grid on, grid minor, hold on
plot(data2(:,1),data2(:,2),'.k')
plot(single_param_data2(:,1),single_param_data2(:,2),'or')
plot(double_param_data2(:,1),double_param_data2(:,2),'+b') 

figure('Name', 'co2.csv')
grid on, grid minor, hold on
plot(data3(:,1),data3(:,2),'.k')
plot(single_param_data3(:,1),single_param_data3(:,2),'or')
plot(double_param_data3(:,1),double_param_data3(:,2),'+b') 

figure('Name', 'cubic.csv')
grid on, grid minor, hold on
plot(data4(:,1),data4(:,2),'.k')
plot(single_param_data4(:,1),single_param_data4(:,2),'or')
plot(double_param_data4(:,1),double_param_data4(:,2),'+b') 

figure('Name', 'faithful.csv')
grid on, grid minor, hold on
plot(data5(:,1),data5(:,2),'.k')
plot(single_param_data5(:,1),single_param_data5(:,2),'or')
plot(double_param_data5(:,1),double_param_data5(:,2),'+b')  

figure('Name', 'intensity.csv')
grid on, grid minor, hold on
plot(data6(:,1),data6(:,2),'.k')
plot(single_param_data6(:,1),single_param_data6(:,2),'or')
plot(double_param_data6(:,1),double_param_data6(:,2),'+b')  

figure('Name', 'JohnsonJohnson.csv')
grid on, grid minor, hold on
plot(data7(:,1),data7(:,2),'.k')
plot(single_param_data7(:,1),single_param_data7(:,2),'or')
plot(double_param_data7(:,1),double_param_data7(:,2),'+b')   